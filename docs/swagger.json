{
    "swagger": "2.0",
    "info": {
        "description": "This is the API server used for POS TUI.",
        "title": "Swagger POS TUI API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-git clone TODO: CHANGE"
        },
        "version": "1.0"
    },
    "host": "localhost:8001",
    "basePath": "/api/v1",
    "paths": {
        "/": {
            "get": {
                "description": "do ping",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "example"
                ],
                "summary": "ping example",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticates a user using username and password, returns a JWT token if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Authenticate a user",
                "parameters": [
                    {
                        "description": "User login object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT Token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/order_lines": {
            "post": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Create a new orderLine with the given input data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orderLines"
                ],
                "summary": "Create a new orderLine",
                "parameters": [
                    {
                        "description": "Create orderLine object",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateOrderLine"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created orderLine",
                        "schema": {
                            "$ref": "#/definitions/models.OrderLine"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/order_lines/{id}": {
            "get": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Get details of a orderLine by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orderLines"
                ],
                "summary": "Find a orderLine by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OrderLine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved orderLine",
                        "schema": {
                            "$ref": "#/definitions/models.OrderLine"
                        }
                    },
                    "404": {
                        "description": "OrderLine not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Update the orderLine details for the given ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orderLines"
                ],
                "summary": "Update a orderLine by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OrderLine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update orderLine object",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateOrderLine"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated orderLine",
                        "schema": {
                            "$ref": "#/definitions/models.OrderLine"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "orderLine not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Delete the orderLine with the given ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orderLines"
                ],
                "summary": "Delete a orderLine by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OrderLine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted orderLine",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "orderLine not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Get a list of all products with optional pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get all products with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit for paginaCreateProducttion",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Product"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Create new products with the given input data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Create new products",
                "parameters": [
                    {
                        "description": "Create product object",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CreateProducts"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created product",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Product"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Get details of a product by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Find a product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved product",
                        "schema": {
                            "$ref": "#/definitions/models.Product"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Update the product details for the given ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Update a product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update product object",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProduct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated product",
                        "schema": {
                            "$ref": "#/definitions/models.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "product not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Delete the product with the given ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Delete a product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted product",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "product not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Registers a new user with the given username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/resetPassword": {
            "post": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Resets a user password with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "description": "User registration object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginUser"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully reset password",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateOrder": {
            "type": "object",
            "required": [
                "cashout_number",
                "customer",
                "lines_id",
                "total"
            ],
            "properties": {
                "cashout_number": {
                    "type": "integer"
                },
                "customer": {
                    "type": "string"
                },
                "lines_id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "total": {
                    "description": "In cents, with VAT",
                    "type": "integer"
                }
            }
        },
        "models.CreateOrderLine": {
            "type": "object",
            "required": [
                "price",
                "product_id",
                "quantity",
                "total",
                "vat"
            ],
            "properties": {
                "price": {
                    "description": "In Cents, with VAT",
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "quantity": {
                    "description": "decimal.NewFromString(\"136.02\")",
                    "type": "number"
                },
                "total": {
                    "description": "In Cents",
                    "type": "integer"
                },
                "vat": {
                    "description": "(ex: 2100 for 21.00%)",
                    "type": "integer"
                }
            }
        },
        "models.CreateProducts": {
            "type": "object",
            "required": [
                "barcode_number",
                "name",
                "price",
                "stock",
                "vat"
            ],
            "properties": {
                "barcode_number": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "description": "In cents, with VAT",
                    "type": "integer"
                },
                "stock": {
                    "type": "number"
                },
                "vat": {
                    "description": "(ex: 2100 for 21.00%)",
                    "type": "integer"
                }
            }
        },
        "models.LoginUser": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Order": {
            "type": "object",
            "properties": {
                "cashout_number": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lines_id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "total": {
                    "description": "In cents, with VAT",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.OrderLine": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "price": {
                    "description": "In Cents, with VAT",
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "quantity": {
                    "description": "decimal.NewFromString(\"136.02\")",
                    "type": "number"
                },
                "total": {
                    "description": "In Cents, with VAT",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "vat": {
                    "description": "(ex: 2100 for 21.00%)",
                    "type": "integer"
                }
            }
        },
        "models.Product": {
            "type": "object",
            "properties": {
                "barcode_number": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "description": "In cents, with VAT",
                    "type": "integer"
                },
                "stock": {
                    "description": "decimal.NewFromString(\"136.02\")",
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "vat": {
                    "description": "(ex: 2100 for 21.00%)",
                    "type": "integer"
                }
            }
        },
        "models.UpdateOrder": {
            "type": "object",
            "properties": {
                "cashout_number": {
                    "type": "integer"
                },
                "customer": {
                    "type": "string"
                },
                "lines_id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "total": {
                    "description": "In cents, with VAT",
                    "type": "integer"
                }
            }
        },
        "models.UpdateOrderLine": {
            "type": "object",
            "properties": {
                "price": {
                    "description": "In Cents, with VAT",
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "quantity": {
                    "description": "decimal.NewFromString(\"136.02\")",
                    "type": "number"
                },
                "total": {
                    "description": "In Cents, with VAT",
                    "type": "integer"
                },
                "vat": {
                    "description": "(ex: 2100 for 21.00%)",
                    "type": "integer"
                }
            }
        },
        "models.UpdateProduct": {
            "type": "object",
            "properties": {
                "barcode_number": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "description": "In cents, with VAT",
                    "type": "integer"
                },
                "stock": {
                    "type": "number"
                },
                "vat": {
                    "description": "(ex: 2100 for 21.00%)",
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "JwtAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}