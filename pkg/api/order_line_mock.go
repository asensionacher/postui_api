// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/api/order_line.go
//
// Generated by this command:
//
//	mockgen -package=api -source=pkg/api/order_line.go
//

// Package api is a generated GoMock package.
package api

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderLineRepository is a mock of OrderLineRepository interface.
type MockOrderLineRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderLineRepositoryMockRecorder
	isgomock struct{}
}

// MockOrderLineRepositoryMockRecorder is the mock recorder for MockOrderLineRepository.
type MockOrderLineRepositoryMockRecorder struct {
	mock *MockOrderLineRepository
}

// NewMockOrderLineRepository creates a new mock instance.
func NewMockOrderLineRepository(ctrl *gomock.Controller) *MockOrderLineRepository {
	mock := &MockOrderLineRepository{ctrl: ctrl}
	mock.recorder = &MockOrderLineRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderLineRepository) EXPECT() *MockOrderLineRepositoryMockRecorder {
	return m.recorder
}

// CreateOrderLine mocks base method.
func (m *MockOrderLineRepository) CreateOrderLine(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateOrderLine", c)
}

// CreateOrderLine indicates an expected call of CreateOrderLine.
func (mr *MockOrderLineRepositoryMockRecorder) CreateOrderLine(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderLine", reflect.TypeOf((*MockOrderLineRepository)(nil).CreateOrderLine), c)
}

// DeleteOrderLine mocks base method.
func (m *MockOrderLineRepository) DeleteOrderLine(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteOrderLine", c)
}

// DeleteOrderLine indicates an expected call of DeleteOrderLine.
func (mr *MockOrderLineRepositoryMockRecorder) DeleteOrderLine(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderLine", reflect.TypeOf((*MockOrderLineRepository)(nil).DeleteOrderLine), c)
}

// FindOrderLine mocks base method.
func (m *MockOrderLineRepository) FindOrderLine(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindOrderLine", c)
}

// FindOrderLine indicates an expected call of FindOrderLine.
func (mr *MockOrderLineRepositoryMockRecorder) FindOrderLine(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderLine", reflect.TypeOf((*MockOrderLineRepository)(nil).FindOrderLine), c)
}

// FindOrderLines mocks base method.
func (m *MockOrderLineRepository) FindOrderLines(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindOrderLines", c)
}

// FindOrderLines indicates an expected call of FindOrderLines.
func (mr *MockOrderLineRepositoryMockRecorder) FindOrderLines(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderLines", reflect.TypeOf((*MockOrderLineRepository)(nil).FindOrderLines), c)
}

// UpdateOrderLine mocks base method.
func (m *MockOrderLineRepository) UpdateOrderLine(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateOrderLine", c)
}

// UpdateOrderLine indicates an expected call of UpdateOrderLine.
func (mr *MockOrderLineRepositoryMockRecorder) UpdateOrderLine(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderLine", reflect.TypeOf((*MockOrderLineRepository)(nil).UpdateOrderLine), c)
}
