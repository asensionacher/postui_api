// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/api/products.go

// Package api is a generated GoMock package.
package api

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// CreateProducts mocks base method.
func (m *MockProductRepository) CreateProducts(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateProducts", c)
}

// CreateProducts indicates an expected call of CreateProducts.
func (mr *MockProductRepositoryMockRecorder) CreateProducts(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProducts", reflect.TypeOf((*MockProductRepository)(nil).CreateProducts), c)
}

// DeleteProduct mocks base method.
func (m *MockProductRepository) DeleteProduct(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteProduct", c)
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductRepositoryMockRecorder) DeleteProduct(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductRepository)(nil).DeleteProduct), c)
}

// FindProduct mocks base method.
func (m *MockProductRepository) FindProduct(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindProduct", c)
}

// FindProduct indicates an expected call of FindProduct.
func (mr *MockProductRepositoryMockRecorder) FindProduct(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProduct", reflect.TypeOf((*MockProductRepository)(nil).FindProduct), c)
}

// FindProducts mocks base method.
func (m *MockProductRepository) FindProducts(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindProducts", c)
}

// FindProducts indicates an expected call of FindProducts.
func (mr *MockProductRepositoryMockRecorder) FindProducts(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProducts", reflect.TypeOf((*MockProductRepository)(nil).FindProducts), c)
}

// Healthcheck mocks base method.
func (m *MockProductRepository) Healthcheck(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Healthcheck", c)
}

// Healthcheck indicates an expected call of Healthcheck.
func (mr *MockProductRepositoryMockRecorder) Healthcheck(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*MockProductRepository)(nil).Healthcheck), c)
}

// UpdateProduct mocks base method.
func (m *MockProductRepository) UpdateProduct(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateProduct", c)
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepositoryMockRecorder) UpdateProduct(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepository)(nil).UpdateProduct), c)
}
