// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/api/order.go
//
// Generated by this command:
//
//	mockgen -package=api -source=pkg/api/order.go
//

// Package api is a generated GoMock package.
package api

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
	isgomock struct{}
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepository) CreateOrder(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateOrder", c)
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryMockRecorder) CreateOrder(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrder), c)
}

// DeleteOrder mocks base method.
func (m *MockOrderRepository) DeleteOrder(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteOrder", c)
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderRepositoryMockRecorder) DeleteOrder(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderRepository)(nil).DeleteOrder), c)
}

// FindOrder mocks base method.
func (m *MockOrderRepository) FindOrder(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindOrder", c)
}

// FindOrder indicates an expected call of FindOrder.
func (mr *MockOrderRepositoryMockRecorder) FindOrder(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrder", reflect.TypeOf((*MockOrderRepository)(nil).FindOrder), c)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepository) UpdateOrder(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateOrder", c)
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrder(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrder), c)
}
